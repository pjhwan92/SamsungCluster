/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-21")
public class InputSplits implements org.apache.thrift.TBase<InputSplits, InputSplits._Fields>, java.io.Serializable, Cloneable, Comparable<InputSplits> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InputSplits");

  private static final org.apache.thrift.protocol.TField FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("files", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SPLITS_FIELD_DESC = new org.apache.thrift.protocol.TField("splits", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InputSplitsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InputSplitsTupleSchemeFactory());
  }

  private List<String> files; // required
  private List<Split> splits; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILES((short)1, "files"),
    SPLITS((short)2, "splits");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILES
          return FILES;
        case 2: // SPLITS
          return SPLITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILES, new org.apache.thrift.meta_data.FieldMetaData("files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SPLITS, new org.apache.thrift.meta_data.FieldMetaData("splits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Split"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InputSplits.class, metaDataMap);
  }

  public InputSplits() {
  }

  public InputSplits(
    List<String> files,
    List<Split> splits)
  {
    this();
    this.files = files;
    this.splits = splits;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InputSplits(InputSplits other) {
    if (other.isSetFiles()) {
      List<String> __this__files = new ArrayList<String>(other.files);
      this.files = __this__files;
    }
    if (other.isSetSplits()) {
      List<Split> __this__splits = new ArrayList<Split>(other.splits.size());
      for (Split other_element : other.splits) {
        __this__splits.add(other_element);
      }
      this.splits = __this__splits;
    }
  }

  public InputSplits deepCopy() {
    return new InputSplits(this);
  }

  @Override
  public void clear() {
    this.files = null;
    this.splits = null;
  }

  public int getFilesSize() {
    return (this.files == null) ? 0 : this.files.size();
  }

  public java.util.Iterator<String> getFilesIterator() {
    return (this.files == null) ? null : this.files.iterator();
  }

  public void addToFiles(String elem) {
    if (this.files == null) {
      this.files = new ArrayList<String>();
    }
    this.files.add(elem);
  }

  public List<String> getFiles() {
    return this.files;
  }

  public InputSplits setFiles(List<String> files) {
    this.files = files;
    return this;
  }

  public void unsetFiles() {
    this.files = null;
  }

  /** Returns true if field files is set (has been assigned a value) and false otherwise */
  public boolean isSetFiles() {
    return this.files != null;
  }

  public void setFilesIsSet(boolean value) {
    if (!value) {
      this.files = null;
    }
  }

  public int getSplitsSize() {
    return (this.splits == null) ? 0 : this.splits.size();
  }

  public java.util.Iterator<Split> getSplitsIterator() {
    return (this.splits == null) ? null : this.splits.iterator();
  }

  public void addToSplits(Split elem) {
    if (this.splits == null) {
      this.splits = new ArrayList<Split>();
    }
    this.splits.add(elem);
  }

  public List<Split> getSplits() {
    return this.splits;
  }

  public InputSplits setSplits(List<Split> splits) {
    this.splits = splits;
    return this;
  }

  public void unsetSplits() {
    this.splits = null;
  }

  /** Returns true if field splits is set (has been assigned a value) and false otherwise */
  public boolean isSetSplits() {
    return this.splits != null;
  }

  public void setSplitsIsSet(boolean value) {
    if (!value) {
      this.splits = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILES:
      if (value == null) {
        unsetFiles();
      } else {
        setFiles((List<String>)value);
      }
      break;

    case SPLITS:
      if (value == null) {
        unsetSplits();
      } else {
        setSplits((List<Split>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILES:
      return getFiles();

    case SPLITS:
      return getSplits();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILES:
      return isSetFiles();
    case SPLITS:
      return isSetSplits();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InputSplits)
      return this.equals((InputSplits)that);
    return false;
  }

  public boolean equals(InputSplits that) {
    if (that == null)
      return false;

    boolean this_present_files = true && this.isSetFiles();
    boolean that_present_files = true && that.isSetFiles();
    if (this_present_files || that_present_files) {
      if (!(this_present_files && that_present_files))
        return false;
      if (!this.files.equals(that.files))
        return false;
    }

    boolean this_present_splits = true && this.isSetSplits();
    boolean that_present_splits = true && that.isSetSplits();
    if (this_present_splits || that_present_splits) {
      if (!(this_present_splits && that_present_splits))
        return false;
      if (!this.splits.equals(that.splits))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_files = true && (isSetFiles());
    list.add(present_files);
    if (present_files)
      list.add(files);

    boolean present_splits = true && (isSetSplits());
    list.add(present_splits);
    if (present_splits)
      list.add(splits);

    return list.hashCode();
  }

  @Override
  public int compareTo(InputSplits other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files, other.files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplits()).compareTo(other.isSetSplits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splits, other.splits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InputSplits(");
    boolean first = true;

    sb.append("files:");
    if (this.files == null) {
      sb.append("null");
    } else {
      sb.append(this.files);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("splits:");
    if (this.splits == null) {
      sb.append("null");
    } else {
      sb.append(this.splits);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InputSplitsStandardSchemeFactory implements SchemeFactory {
    public InputSplitsStandardScheme getScheme() {
      return new InputSplitsStandardScheme();
    }
  }

  private static class InputSplitsStandardScheme extends StandardScheme<InputSplits> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InputSplits struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.files = new ArrayList<String>(_list58.size);
                String _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = iprot.readString();
                  struct.files.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPLITS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.splits = new ArrayList<Split>(_list61.size);
                Split _elem62;
                for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                {
                  _elem62 = new Split();
                  _elem62.read(iprot);
                  struct.splits.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setSplitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InputSplits struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.files != null) {
        oprot.writeFieldBegin(FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.files.size()));
          for (String _iter64 : struct.files)
          {
            oprot.writeString(_iter64);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.splits != null) {
        oprot.writeFieldBegin(SPLITS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.splits.size()));
          for (Split _iter65 : struct.splits)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InputSplitsTupleSchemeFactory implements SchemeFactory {
    public InputSplitsTupleScheme getScheme() {
      return new InputSplitsTupleScheme();
    }
  }

  private static class InputSplitsTupleScheme extends TupleScheme<InputSplits> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InputSplits struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFiles()) {
        optionals.set(0);
      }
      if (struct.isSetSplits()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFiles()) {
        {
          oprot.writeI32(struct.files.size());
          for (String _iter66 : struct.files)
          {
            oprot.writeString(_iter66);
          }
        }
      }
      if (struct.isSetSplits()) {
        {
          oprot.writeI32(struct.splits.size());
          for (Split _iter67 : struct.splits)
          {
            _iter67.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InputSplits struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.files = new ArrayList<String>(_list68.size);
          String _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = iprot.readString();
            struct.files.add(_elem69);
          }
        }
        struct.setFilesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.splits = new ArrayList<Split>(_list71.size);
          Split _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new Split();
            _elem72.read(iprot);
            struct.splits.add(_elem72);
          }
        }
        struct.setSplitsIsSet(true);
      }
    }
  }

}

